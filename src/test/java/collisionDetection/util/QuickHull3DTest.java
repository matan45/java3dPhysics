package collisionDetection.util;

import collisionDetection.util.quickHull.QuickHull3D;
import math.Vector3f;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;


class QuickHull3DTest {

    @Test
    void quickHullTest() {
        float[] floatArray = {
                0.3215426810286406f, 0.1678336189760208f, -0.2203710966001927f,
                0.2229772524190855f, -0.4213242506806965f, -0.1966818060695024f,
                0.3688830163971363f, -0.1831502133823468f, -0.2056387967482571f,
                -0.1712592515826777f, -0.3542439228428937f, 0.2223876390814666f,
                -0.3309556113844324f, -0.370961861099081f, 0.2439994981922204f,
                -0.1004397059794885f, -0.09014152417903909f, -0.008600084584765189f,
                0.458374538420117f, -0.09914027349943322f, -0.2505798421339875f,
                -0.4954086979808367f, -0.3339869997780649f, -0.3195065691317492f,
                0.053091190339151f, 0.3036317017894533f, 0.1380056861210668f,
                0.4615616439483703f, 0.4665423151725366f, 0.1766835406205464f,
                -0.4797380864431505f, 0.0419809916447671f, -0.4254776681079321f,
                -0.003168473023146823f, -0.2525299883005488f, -0.27151530400991f,
                -0.3577162826971303f, -0.1375644040643837f, -0.04494194644032229f,
                -0.3392973838740004f, 0.4288679723896719f, -0.01599531622230571f,
                0.1667164640191164f, 0.003605551555385444f, -0.4014989499947977f,
                0.00714666676441833f, 0.1140243407469469f, 0.407090128778564f,
                -0.03621271768232132f, 0.3728502838619522f, 0.4947140370446388f,
                -0.3411871756810576f, -0.3328629143842151f, -0.4270033635450559f,
                0.3544683273457627f, -0.450828987127942f, -0.0827870439577727f,
                -0.4018510635028137f, 0.08917494033386464f, -0.2367824197158054f,
                0.3978697768392692f, -0.002667689232777493f, 0.1641431727112673f,
                -0.245701439441835f, 0.495905311308713f, -0.3194406286994373f,
                0.161352035739787f, -0.1563404972258401f, 0.3852604361113724f,
                0.07214279572678994f, -0.4960366976410492f, 0.1112227161519441f,
                0.3201855824516951f, 0.359077846965825f, 0.02136723140381946f,
                0.1190541238701475f, -0.05734495917087884f, 0.2032677509852384f,
                0.3210853052521919f, 0.4807189479290684f, 0.4433501688235907f,
                0.3862800354941562f, 0.2085496142586224f, 0.09336129957191763f,
                0.1233572616459404f, 0.265491605052251f, 0.117400122450106f,
                0.1438531872293476f, -0.2594872752758556f, -0.2026374435076839f,
                0.2724846394476338f, -0.3506708492996831f, 0.2750346518820475f,
                -0.4926118841325975f, -0.3279366743079728f, 0.3683135596740186f,
                0.2459906458351674f, 0.3647787136629026f, -0.1641662355178652f,
                -0.141922976953837f, -0.2994764654892278f, -0.3009570467294725f,
                -0.1850859398814719f, 0.2606059478228967f, 0.004159106876849283f,
                -0.09789466634196664f, -0.3156603563722785f, -0.303610991503681f,
                0.2100642609503719f, -0.4499717643018549f, 0.3245569875692548f,
                -0.1707163766685095f, -0.2301452446078371f, -0.05112823569320907f,
                -0.312260808713977f, -0.1674135249735914f, 0.2808831662692904f,
                -0.1966306233747216f, 0.2291105671125563f, -0.3387042454804333f,
        };

        float[] result = {
                0.3215426810286406f, 0.1678336189760208f, -0.2203710966001927f,
                0.2229772524190855f, -0.4213242506806965f, -0.1966818060695024f,
                0.458374538420117f, -0.09914027349943322f, -0.2505798421339875f,
                -0.4954086979808367f, -0.3339869997780649f, -0.3195065691317492f,
                0.4615616439483703f, 0.4665423151725366f, 0.1766835406205464f,
                -0.4797380864431505f, 0.0419809916447671f, -0.4254776681079321f,
                -0.3392973838740004f, 0.4288679723896719f, -0.01599531622230571f,
                0.1667164640191164f, 0.003605551555385444f, -0.4014989499947977f,
                -0.03621271768232132f, 0.3728502838619522f, 0.4947140370446388f,
                -0.3411871756810576f, -0.3328629143842151f, -0.4270033635450559f,
                0.3544683273457627f, -0.450828987127942f, -0.0827870439577727f,
                0.3978697768392692f, -0.002667689232777493f, 0.1641431727112673f,
                -0.245701439441835f, 0.495905311308713f, -0.3194406286994373f,
                0.161352035739787f, -0.1563404972258401f, 0.3852604361113724f,
                0.07214279572678994f, -0.4960366976410492f, 0.1112227161519441f,
                0.3210853052521919f, 0.4807189479290684f, 0.4433501688235907f,
                0.2724846394476338f, -0.3506708492996831f, 0.2750346518820475f,
                -0.4926118841325975f, -0.3279366743079728f, 0.3683135596740186f,
                0.2459906458351674f, 0.3647787136629026f, -0.1641662355178652f,
                0.2100642609503719f, -0.4499717643018549f, 0.3245569875692548f
        };
        //List<Vector3f> varray = toVector(floatArray);
        //Set<Vector3f> expected = new HashSet<>(toVector(result));

        QuickHull3D hull = new QuickHull3D();
        Vector3f[] test=toVector(floatArray);
        hull.build(test);

        System.out.println("Vertices:");
        Vector3f[] vertices = hull.getVertices();
        System.out.println(vertices.length);
        for (Vector3f pnt : vertices) {
            System.out.println(pnt.x + " " + pnt.y + " " + pnt.z);
        }

       /* Set<Vector3f> convexHull = QuickHull3D.findConvexHull(varray);
        assertEquals(expected.size(), convexHull.size());*/
    }

    Vector3f[] toVector(float[] floatArray) {
        int numVectors = floatArray.length / 3;
        Vector3f[] vectorArray = new Vector3f[numVectors];

        for (int i = 0; i < numVectors; i++) {
            int startIndex = i * 3;
            float x = floatArray[startIndex];
            float y = floatArray[startIndex + 1];
            float z = floatArray[startIndex + 2];
            vectorArray[i] = new Vector3f(x, y, z);
        }

        return vectorArray;
    }

}